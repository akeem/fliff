{"version":3,"sources":["fliff-logomark.svg","Header.tsx","Home.tsx","Address.tsx","getProvider.ts","Nav.tsx","NewDebt.tsx","List.tsx","dataMungers.ts","Add.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","to","src","logo","alt","Home","Address","address","useState","ensName","setEnsName","useEffect","a","length","window","provider","lookupAddress","name","console","log","getEnsName","getProvider","Nav","setAddress","listAccounts","addresses","getAddress","NewDebt","BalanceTable","queryBy","gql","List","useQuery","loading","error","data","subscribeToMore","document","updateQuery","prev","subscriptionData","mergedBalances","graphData","debts","debtor","forEach","debt","amount","parseInt","_debtee","settler","settlement","credits","debtee","_debtor","settlee","Object","keys","mergeBalances","ListContents","balances","map","ListItem","value","kind","key","submit","Add","setAmount","isValid","match","type","placeholder","required","onChange","e","preventDefault","target","pattern","onClick","App","props","client","ApolloClient","uri","state","gotProvider","web3","ethereum","enable","ethers","providers","Web3Provider","currentProvider","accounts","this","setState","exact","path","React","Component","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b16af9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fliff-logomark.68ab0e72.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport './header.css'\nimport logo from './fliff-logomark.svg'\n\nexport const Header: React.FC = () => {\n  return (\n    <header>\n      <h3 className=\"header-subtitle\">Show me the</h3>\n      <h1 className=\"header-title\">\n        <span>FLi</span><span>FF</span>\n      </h1>\n      <Link to=\"/list\">\n        <img src={logo} alt=\"Fliff Logomark\" />\n      </Link>\n    </header>\n  )\n};\n\nexport default Header;\n","import React from 'react';\nimport Header from './Header';\n\nexport default function Home() {\n  return (\n    <div>\n      <Header />\n    </div>\n  )\n};\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  address: string\n}\n\nexport default function Address({ address }: Props) {\n  const [ensName, setEnsName] = useState(null);\n  useEffect(() => {\n    async function getEnsName() {\n      if (address.length) {\n        try {\n          const name = await (window as any).provider.lookupAddress(address)\n          if (name) {\n            setEnsName(name)\n          }\n        } catch (err) {\n          console.log(err)\n        }\n      }\n    }\n\n    getEnsName();\n  }, [address]);\n\n  return (\n    <div>{ensName || address}</div>\n  )\n}\n","import { ethers } from 'ethers';\n\nexport default function getProvider(): ethers.providers.Web3Provider {\n  return (window as any).provider\n}\n","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport 'mustard-ui';\nimport './nav.css';\nimport Address from './Address'\nimport getProvider from './getProvider'\n\nexport const Nav = () => {\n  const [address, setAddress] = useState('')\n  useEffect(() => {\n    async function getAddress() {\n      const addresses = await getProvider().listAccounts()\n      if (addresses.length) {\n        setAddress(addresses[0])\n      }\n    }\n\n    getAddress();\n  }, []);\n  return (\n    <nav>\n      <div className=\"nav-container\">\n        <div className=\"nav-logo\">\n          <Link to=\"/\"><span>FLi</span><span>FF</span></Link>\n        </div>\n        <div className=\"address\">\n          <Address address={address} />\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Nav\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './newdebt.css'\n\nexport default function NewDebt() {\n  return (\n    <div className=\"newdebt\">\n      <Link className=\"newlink\" to=\"/add\">+</Link>\n      <BalanceTable />\n    </div>\n  );\n}\n\nfunction BalanceTable() {\n  return (\n    <div className=\"balancetable\">\n      <div className=\"balancetablecell\">\n        <div>Balance</div><div>1486.64</div>\n      </div>\n      <div className=\"balancetablecell\">\n        <div>Credits</div><div className=\"credit\">1500.01</div>\n      </div>\n      <div className=\"balancetablecell\">\n        <div>Debits</div><div className=\"debit\">13.37</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport Nav from './Nav';\nimport Address from './Address';\nimport NewDebt from './NewDebt';\nimport './list.css'\nimport mergeBalances from './dataMungers'\n\nconst queryBy = (address: string) => gql`\n  {\n    debtor: debts(where: { _debtor: \"${address}\"}) {\n      amount\n      _debtor\n      _debtee\n    }\n    debtee: debts(where: { _debtee: \"${address}\"}) {\n      amount\n      _debtor\n      _debtee\n    }\n    settler: settlements(where: { _debtor: \"${address}\" }) {\n      amount\n      _debtor\n      _debtee\n    }\n    settlee: settlements(where: { _debtee: \"${address}\" }) {\n      amount\n      _debtor\n      _debtee\n    }\n  }\n`\n\ninterface ListProps {\n  address: string\n}\nexport default function List({ address }: ListProps) {\n  const { loading, error, data, subscribeToMore } = useQuery(queryBy(address))\n\n  if (loading) {\n    return (\n      <div className=\"content\">\n        <Nav />\n        <h1>Loading...</h1>\n      </div>\n    )\n  } else if (error) {\n    return (\n      <div className=\"content\">\n        <Nav />\n        <h1>It borked.</h1>\n      </div>\n    )\n  }\n\n  subscribeToMore({\n    document: queryBy(address),\n    updateQuery: (prev, { subscriptionData }) => {\n      \n    },\n  })\n\n  const mergedBalances = mergeBalances(data)\n  \n  return (\n    <div className=\"content\">\n      <Nav />\n      <ListContents balances={mergedBalances} />\n      <NewDebt />\n    </div>\n  )\n}\n\ninterface Balances {\n  credits: {\n    [address: string]: number\n  }\n  debts: {\n    [address: string]: number\n  }\n}\n\ninterface ListContentsProps {\n  balances: Balances\n}\n\nfunction ListContents({ balances }: ListContentsProps) {\n  console.log(balances)\n  return (\n    <div className=\"balances\">\n    {Object.keys(balances.debts).map(debtor => {\n      return (\n        <ListItem address={debtor} value={balances.debts[debtor]} kind=\"debt\" key={debtor} />\n      );\n    })}\n    </div>\n  )\n}\n\ninterface ListItemProps {\n  address: string\n  value: number\n  kind: 'debt' | 'credit'\n}\n\nfunction ListItem({ address, value, kind }: ListItemProps) {\n  return (\n    <div className=\"balance\">\n      <div><Address address={address} /></div>\n      <div>USDC</div>\n      <div className={kind}><span>{value}</span></div>\n    </div>\n  )\n}\n","interface Debt {\n  amount: string\n  _debtor: string\n  _debtee: string\n}\n\ninterface Settlement extends Debt {}\n\ninterface GraphResult {\n  debtor: Debt[]\n  debtee: Debt[]\n  settler: Settlement[]\n  settlee: Settlement[]\n}\n\ninterface Value {\n  [address: string]: number\n}\n\ninterface MergedData {\n  credits: Value\n  debts: Value\n}\n\nexport default function mergeBalances(graphData: GraphResult): MergedData {\n  const debts: Value = {}\n  \n  graphData.debtor.forEach(debt => {\n    const amount = parseInt(debt.amount)\n    if (debts[debt._debtee]) {\n      debts[debt._debtee] += amount\n    } else {\n      debts[debt._debtee] = amount\n    }\n  })\n\n  graphData.settler.forEach(settlement => {\n    const amount = parseInt(settlement.amount)\n    debts[settlement._debtee] -= amount\n  })\n\n  const credits: Value = {}\n  graphData.debtee.forEach(debt => {\n    const amount = parseInt(debt.amount)\n    if (credits[debt._debtor]) {\n      credits[debt._debtor] += amount\n    } else {\n      credits[debt._debtor] = amount\n    }\n  })\n\n  graphData.settlee.forEach(settlement => {\n    const amount = parseInt(settlement.amount)\n    credits[settlement._debtor] += amount\n  })\n\n  // time to filter out the zeroes\n  Object.keys(debts).forEach(address => {\n    if (debts[address] === 0) {\n      delete debts[address]\n    }\n  })\n  Object.keys(credits).forEach(address => {\n    if (credits[address] === 0) {\n      delete credits[address]\n    }\n  })\n\n  return {\n    credits,\n    debts,\n  }\n}\n","import React, { useState, ChangeEvent } from 'react';\nimport Nav from './Nav';\nimport './add.css';\n\nfunction submit() {\n  console.log('We have submitted!')\n}\n\nexport default function Add() {\n  const [address, setAddress] = useState('')\n  const [amount, setAmount] = useState('')\n\n  const isValid = address.length && amount.length && amount.match(/[0-9]*\\.?[0-9]*/)\n  \n  return (\n    <div className=\"content\">\n      <Nav />\n      <div className=\"form-control\">\n        <label>\n          Who?\n        </label>\n        <input\n          type=\"text\"\n          placeholder=\"Wallet or ENS address\"\n          required\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            e.preventDefault()\n            setAddress(e.target.value)\n          }}\n        />\n      </div>\n      <div className=\"form-control\">\n        <label>\n          How Much?\n        </label>\n        <input\n          type=\"text\"\n          placeholder=\"Amount in USDC\"\n          required\n          pattern=\"[0-9]*\\.?[0-9]*\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            e.preventDefault()\n            setAmount(e.target.value)\n          }}\n        />\n      </div>\n      <button\n        className={`fliff-it ${isValid ? 'valid' : 'invalid'}`}\n        onClick={submit}\n      >\n        Fliff It!\n      </button>\n    </div>\n  )\n}\n","import React from 'react';\nimport 'mustard-ui';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from './Home';\nimport List from './List';\nimport Add from './Add';\nimport { ethers } from 'ethers';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport getProvider from './getProvider'\n\ninterface State {\n  gotProvider: boolean\n  address: string | null\n}\n\nexport default class App extends React.Component<any, State> {\n  client = new ApolloClient({\n    uri: 'https://api.thegraph.com/subgraphs/id/QmWVv3Y19zTB6JVLQFzcD7BzACMdJVgAyucFUumxFCBVEL',\n  })\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      gotProvider: false,\n      address: null,\n    }\n  }\n  \n  async componentDidMount() {\n    const web3 = (window as any).ethereum || (window as any).web3\n    \n    if (web3) {\n      if (web3.enable) {\n        await web3.enable()\n      }\n      (window as any).provider = new ethers.providers.Web3Provider(web3.currentProvider);\n      const accounts = await getProvider().listAccounts()\n      if (accounts.length) {\n        const address = accounts[0]\n        this.setState({\n          gotProvider: true,\n          address,\n        })\n      }\n    }\n  }\n  \n  render() {\n    const { gotProvider, address } = this.state\n\n    if (!gotProvider || !address) {\n      return (\n        <header>\n          trying to get provider...\n        </header>\n      )\n    }\n    \n    return (\n      <ApolloProvider client={this.client}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/list\">\n              <List address={address} />\n            </Route>\n            <Route exact path=\"/add\">\n              <Add />\n            </Route>\n          </Switch>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}